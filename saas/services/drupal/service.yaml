Description: >
  This is the actual Drupal ECS service and task definition

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String
    
  ECRImage:
    Description: Path to the ECR image
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2

  MaxCount:
    Description: Maximum number of instances of this task we can run across our cluster
    Type: Number
    Default: 3

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /*

  ECSServiceAutoScalingRoleARN:
    Description: The ECS service auto scaling role ARN
    Type: String
  
  ECSTaskExecutionRoleARN:
    Description: The discovery service ARN for inter-container communication
    Type: String
    
  DiscoveryService:
    Description: The discovery service ARN for inter-container communication
    Type: String
    
  Subnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroup:
    Description: Select the Security Group to use for the ECS cluster hosts
    Type: AWS::EC2::SecurityGroup::Id
  
  DBEndpoint:
    Description: The RDS endpoint address
    Type: String
    
  DBPassword:
    Description: The RDS master database password
    Type: String

  ECEndpoint:
    Description: The ElastiCache endpoint address
    Type: String
    
  ECPort:
    Description: The ElasticCache port
    Type: String

  AppBucket:
    Description: Application S3 bucket name
    Type: String
  
  S3UserKeyID:
    Description: AWS Access Key ID to a user with S3 access
    Type: String

  S3UserSecretKey:
    Description: AWS Secret Key to a user with S3 access
    Type: String
  
  SESUserKeyID:
    Description: AWS Access Key ID to a user with SES access
    Type: String

  SESUserSecretKey:
    Description: AWS Secret Key to a user with SES access
    Type: String

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      # Role: !Sub arn:${AWS::Partition}:iam::{AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS
      DesiredCount: !Ref DesiredCount
      EnableExecuteCommand: true
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: drupal-service
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      ServiceRegistries:
        - ContainerName: drupal-service
          ContainerPort: 80
          RegistryArn: !Ref DiscoveryService
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !Ref SecurityGroup
          Subnets: !Ref Subnets

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: drupal-service
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleARN
      TaskRoleArn: !Ref ECSTaskExecutionRoleARN
      ContainerDefinitions:
        - Name: drupal-service
          Essential: true
          Image: !Ref ECRImage
          Memory: 1024
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: DRUPAL_DB_HOST
              Value: !Ref DBEndpoint
            - Name: DRUPAL_DB_PORT
              Value: 3306
            - Name: DRUPAL_DB_USER
              Value: admin
            - Name: DRUPAL_DB_PASS
              Value: !Ref DBPassword
            - Name: DRUPAL_DB_NAME
              Value: drupal
            - Name: S3FS_BUCKET
              Value: !Ref AppBucket
            - Name: S3FS_AWS_ACCESS_KEY
              Value: !Ref S3UserKeyID
            - Name: S3FS_AWS_SECRET_KEY
              Value: !Ref S3UserSecretKey
            - Name: ELASTICACHE_HOST
              Value: !Ref ECEndpoint
            - Name: ELASTICACHE_PORT
              Value: !Ref ECPort
            - Name: SES_AWS_ACCESS_KEY
              Value: !Ref SESUserKeyID
            - Name: SES_AWS_SECRET_KEY
              Value: !Ref SESUserSecretKey
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          LinuxParameters:
            InitProcessEnabled: true
      NetworkMode: awsvpc

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /robots.txt
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  # ServiceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub ecs-service-${AWS::StackName}
  #     Path: /
  #     AssumeRolePolicyDocument: |
  #       {
  #           "Statement": [{
  #               "Effect": "Allow",
  #               "Principal": { "Service": [ "ecs.amazonaws.com" ]},
  #               "Action": [ "sts:AssumeRole" ]
  #           }]
  #       }
  #     Policies:
  #       - PolicyName: !Sub ecs-service-${AWS::StackName}
  #         PolicyDocument:
  #           {
  #             "Version": "2012-10-17",
  #             "Statement":
  #               [
  #                 {
  #                   "Effect": "Allow",
  #                   "Action":
  #                     [
  #                       "ec2:AuthorizeSecurityGroupIngress",
  #                       "ec2:Describe*",
  #                       "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
  #                       "elasticloadbalancing:Describe*",
  #                       "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
  #                       "elasticloadbalancing:DeregisterTargets",
  #                       "elasticloadbalancing:DescribeTargetGroups",
  #                       "elasticloadbalancing:DescribeTargetHealth",
  #                       "elasticloadbalancing:RegisterTargets"
  #                     ],
  #                   "Resource": "*"
  #                 }
  #               ]
  #           }
  
  # ServiceLinkedRole:
  #   Type: "AWS::IAM::ServiceLinkedRole"
  #   Properties:
  #     AWSServiceName: "ecs.amazonaws.com"
  #     Description: "Role to enable Amazon ECS to manage your cluster."

  ServiceScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt Service.Name
      RoleARN: !Ref ECSServiceAutoScalingRoleARN
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ServiceScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  CPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${EnvironmentName} CPU utilization greater than 90%
      AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ServiceScaleOutPolicy

  CPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${EnvironmentName} CPU utilization less than 70%
      AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "10"
      Threshold: "70"
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ServiceScaleInPolicy

Outputs:
  Service:
    Description: A reference to the ECS service
    Value: !GetAtt Service.Name
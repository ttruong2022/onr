Description: >
  This template deploys an ECS cluster to the provided VPC and subnets
  using an Auto Scaling Group

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  DomainName:
    Description: Base domain name
    Type: String

  VPC:
    Description: Choose which VPC this Fleet should be deployed to
    Type: AWS::EC2::VPC::Id

  Subnets:
    Description: Choose which subnets this Fleet should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: The list of Security Groups in your Virtual Private Cloud (VPC).
      Make sure select SecurityGroups in the same VPC.

  EC2AMI:
    Description: EC2 AMI Parameter
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /test/images/DrupalImage/latest

  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: c5.large

  KeyPair:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  PrivateListener:
    Description: The Private Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /*

  MaxSize:
    Description: Amazon EC2 Auto Scaling group maximum number
    Type: Number
    Default: 4

  MinSize:
    Description: Amazon EC2 Auto Scaling group minimum number
    Type: Number
    Default: 1

  DesiredSize:
    Description: Amazon EC2 Auto Scaling group desired number
    Type: Number
    Default: 1

  MemoryPolicyTargetValue:
    Description: Target value for ASG target tracking policy
    Type: Number
    Default: 70

  CPUPolicyTargetValue:
    Description: Target value for ASG target tracking policy
    Type: Number
    Default: 70

  # For building the environments file
  DBEndpoint:
    Description: The RDS endpoint address
    Type: String

  DBPassword:
    Description: The RDS master database password
    Type: String
    NoEcho: true

  ECEndpoint:
    Description: The ElastiCache endpoint address
    Type: String

  ECPort:
    Description: The ElasticCache port
    Type: String

  AppBucket:
    Description: Application S3 bucket name
    Type: String

  SolrEndpoint:
    Description: Solr endpoint
    Type: String

  ECAuthToken:
    Description: ElastiCache Auth Token
    Type: String

Resources:

  #Create SSM parameter Store for CW unified agent configuration on Linux
  SSMParameterStore:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub 'AmazonCloudWatch-Linux-${AWS::StackName}-web'
      Type: String
      Value: !Sub |
        {
            "logs": {
                "force_flush_interval": 5,
                "logs_collected": {
                    "files": {
                        "collect_list": [
                            {
                                "file_path": "/var/log/messages",
                                "log_group_name": "${EnvironmentName}-/var/log/messages",
                                "log_stream_name": "{instance_id}",
                                "timestamp_format": "%b %d %H:%M:%S"
                            },
                            {
                                "file_path": "/var/log/dmesg",
                                "log_group_name": "${EnvironmentName}-/var/log/dmesg",
                                "log_stream_name": "{instance_id}"
                            },
                            {
                                "file_path": "/var/log/secure",
                                "log_group_name": "${EnvironmentName}-/var/log/secure",
                                "log_stream_name": "{instance_id}"
                            },
                            {
                                "file_path": "/var/log/maillog",
                                "log_group_name": "${EnvironmentName}-/var/log/maillog",
                                "log_stream_name": "{instance_id}"
                            },
                            {
                                "file_path": "/var/log/php-fpm/www-error.log",
                                "log_group_name": "${EnvironmentName}-applogs",
                                "log_stream_name": "/var/log/php-fpm/www-error.log"
                            },
                            {
                                "file_path": "/var/log/nginx/access.log",
                                "log_group_name": "${EnvironmentName}-applogs",
                                "log_stream_name": "/var/log/nginx/access.log"
                            },
                            {
                                "file_path": "/var/log/nginx/error.log",
                                "log_group_name": "${EnvironmentName}-applogs",
                                "log_stream_name": "/var/log/nginx/error.log"
                            },
                            {
                                "file_path": "/var/log/drupal.log",
                                "log_group_name": "${EnvironmentName}-applogs",
                                "log_stream_name": "/var/log/drupal.log"
                            }
                        ]
                    }
                }
            },
            "agent": {
                "metrics_collection_interval": 60
            },
            "metrics": {
                "append_dimensions": {
                    "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                    "InstanceId": "${!aws:InstanceId}",
                    "InstanceType": "${!aws:InstanceType}"
                },
                "aggregation_dimensions" : [["AutoScalingGroupName"]],
                "metrics_collected": {
                    "disk": {
                        "measurement": [
                            {"name": "used_percent", "rename": "DiskUtilization", "unit": "Percent"}
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                            "/"
                        ]
                    },
                    "mem": {
                        "measurement": [
                            {"name": "mem_used_percent", "rename": "MemoryUtilization", "unit": "Percent"}
                        ],
                        "metrics_collection_interval": 60
                    }
                }
            }
        }
      Description: SSM Parameter for AmazonCloudWatch Linux fleet.

#create IAM role using CloudWatch Agent Server Policy
  CloudWatchAgentServerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub 'CloudWatchAgentServerRole-${AWS::StackName}-web'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:ListAllMyBuckets"
                  - "s3:ListBucketVersions"
                Resource: !Sub "arn:${AWS::Partition}:s3:::*"
              - Effect: Allow
                Action: "s3:*"
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${AppBucket}/Drupal"
                  - !Sub "arn:${AWS::Partition}:s3:::${AppBucket}/Drupal/*"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMDirectoryServiceAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy

#Create instance profile
  FleetInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'CloudWatchAgentServerRole-${AWS::StackName}-web'
      Path: /
      Roles:
        - !Ref 'CloudWatchAgentServerRole'

#Create launch template
  FleetLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'AS-CW-Linux-${AWS::StackName}'
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt 'FleetInstanceProfile.Arn'
        ImageId: !Ref 'EC2AMI'
        InstanceType: !Ref 'InstanceType'
        KeyName: !Ref 'KeyPair'
        MetadataOptions:
          HttpPutResponseHopLimit: 2
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            DeleteOnTermination: true
            Groups: !Ref SecurityGroups
        # BlockDeviceMappings:
        # - DeviceName: /dev/sda1
        #   Ebs:
        #     Encrypted: 'true'
        # - DeviceName: /dev/sdf
        #   Ebs:
        #     Encrypted: 'true'
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource FleetLaunchTemplate --configsets All  --region ${AWS::Region}
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource FleetASG --region ${AWS::Region}
            chmod 0600 /etc/ssh/ssh_host*key
            sed -i '/Allow root to run any commands anywhere/!b;n;croot    ALL=(ALL)       ALL' /etc/sudoers
            dnf update -y
            /sbin/aide --init
            rm -rf /var/lib/aide/aide.db.gz
            mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
        TagSpecifications:
          - ResourceType: 'instance'
            Tags:
              - Key: 'Environment'
                Value: !Ref 'EnvironmentName'
              - Key: 'Group'
                Value: 'rhel'
              - Key: 'Type'
                Value: 'drupal'
    Metadata:
      Comment: Install CloudWatch agent
      AWS::CloudFormation::Init:
        configSets:
          All:
            - 01-CWAgent
            - 02-SetupCfnHup
            - 03-SetupPHPEnv
            - 04-SetupNGINX
        01-CWAgent:
          commands:
            1-StopCWAgentService:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            2-ConfigureCWAgent:
              command: !Sub |
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${SSMParameterStore} -s
        02-SetupCfnHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.FleetLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource FleetLaunchTemplate --configsets All  --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                
                [Install]
                WantedBy=multi-user.target
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        03-SetupPHPEnv:
          files:
            /etc/php-fpm.d/env.conf:
              content: !Sub |
                [www]
                env["ENVIRONMENT"] = "${EnvironmentName}"
                env["DRUSH_OPTIONS_URI"] = "${EnvironmentName}.${DomainName}"
                env["DRUPAL_DB_HOST"] = "${DBEndpoint}"
                env["DRUPAL_DB_PORT"] = "3306"
                env["DRUPAL_DB_USER"] = "drupal"
                env["DRUPAL_DB_PASS"] = "${DBPassword}"
                env["DRUPAL_DB_NAME"] = "drupal"
                env["S3FS_BUCKET"] = "${AppBucket}"
                env["ELASTICACHE_HOST"] = "${ECEndpoint}"
                env["ELASTICACHE_PORT"] = "${ECPort}"
                env["ELASTICACHE_PASS"] = "${ECAuthToken}"
                env["DRUPAL_SOLR_HOST"] = "${SolrEndpoint}"
                env["DRUPAL_SOLR_PORT"] = "8983"
                env["DRUPAL_SOLR_PATH"] = "/"
                env["DRUPAL_SOLR_CORE"] = "search"
              mode: '000400'
              owner: apache
              group: apache
          commands:
            1-RestartPHPFPM:
              command: "systemctl restart php-fpm"
        04-SetupNGINX:
          files:
            /etc/nginx/conf.location.d/s3.conf:
              content: !Sub |
                resolver 10.180.0.2;
                location ~ ^/assets/(.*) {
                  set $query $1;
                  proxy_set_header Host ${AppBucket}.s3.amazonaws.com;
                  proxy_hide_header x-amz-id-2;
                  proxy_hide_header x-amz-request-id;
                  proxy_pass https://${AppBucket}.s3.amazonaws.com/Drupal/s3fs-public/$query;
                }
          commands:
            1-RestartNGINX:
              command: "systemctl restart nginx"

#Create ASG using previous created launch template
  FleetASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-web
      VPCZoneIdentifier: !Ref 'Subnets'
      LaunchTemplate:
        LaunchTemplateId: !Ref 'FleetLaunchTemplate'
        Version: !GetAtt 'FleetLaunchTemplate.LatestVersionNumber'
      MinSize: !Ref 'MinSize'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredSize'
      TargetGroupARNs:
        - !Ref TargetGroup
        - !Ref AdminTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Fleet host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'DesiredSize'
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

# Create target tracking policy on custom memory
  MemoryPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'FleetASG'
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        CustomizedMetricSpecification:
          Dimensions:
            - Name: AutoScalingGroupName
              Value: !Ref 'FleetASG'
          MetricName: MemoryUtilization
          Namespace: CWAgent
          Statistic: Average
        TargetValue: !Ref 'MemoryPolicyTargetValue'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 443
      Protocol: HTTPS
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /robots.txt
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: instance

  AdminTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 443
      Protocol: HTTPS
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /robots.txt
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: instance

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  AdminListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref PrivateListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref AdminTargetGroup
          Type: forward

Outputs:
  AutoScaleGroupName:
    Description: The autoscale group name
    Value: !Ref FleetASG
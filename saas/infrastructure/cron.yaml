Description: >

  Runs cron on an autoscale group

Parameters:
    
  AutoScaleGroupName:
    Description: Autoscale Group to run Drush Cron on
    Type: String
    
  CronDocument:
    Description: The document to run with SSM
    Type: String

Resources:

  CronLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Resource: "*"
                Action:
                  - "autoscaling:DescribeAutoScalingGroups"
              - Effect: Allow
                Resource: 
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${CronDocument}
                  - "arn:*:ec2:*:*:instance/*"
                Action:
                  - "ssm:SendCommand"
              - Effect: Allow
                Resource: "arn:*:ssm:*:*:*"
                Action:
                  - "ssm:GetCommandInvocation"
  
  CronLambda:
    Type: 'AWS::Lambda::Function'
    DeletionPolicy: Delete
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import sys
          import time
          import random
          import boto3
          
          client = boto3.client('autoscaling')
          ssm_client = boto3.client('ssm')
          def handler(event, context):
              # TODO implement
              response = client.describe_auto_scaling_groups(
                  AutoScalingGroupNames=[
                      '${AutoScaleGroupName}',
                  ],
              )
              
              if (not response['AutoScalingGroups']):
                  print('No instances found or no such autoscale group')
                  sys.exit()
              
              instances = [];
              for idx, instance in enumerate(response['AutoScalingGroups'][0]['Instances']):
                  if instance['LifecycleState'] == 'InService' and instance['HealthStatus'] == 'Healthy':
                      instances.append(instance['InstanceId'])
          
              instances = random.sample( instances, len(instances) )
              
              instances = instances[0:1]
              
              response = ssm_client.send_command(
                  InstanceIds=instances,
                  DocumentName='${CronDocument}', )
              
              command_id = response['Command']['CommandId']
              
              time.sleep(2)
              
              while True:
                  finished=0;
                  for idx, instance_id in enumerate(instances):
                      output = ssm_client.get_command_invocation(
                          CommandId=command_id,
                          InstanceId=instance_id,
                      )
                      
                      if (output['Status'] != 'Pending' and output['Status'] != 'InProgress' and output['Status'] != 'Delayed'):
                          finished = finished + 1
                  if (finished >= len(instances)):
                      break
                  time.sleep(2)
                  
              for idx, instance_id in enumerate(instances):
                  output = ssm_client.get_command_invocation(
                      CommandId=command_id,
                      InstanceId=instance_id,
                  )
                  
                  status = output['Status']
                  
                  print('------------------------------------')
                  print(f'RESULTS FROM {instance_id} (STATUS {status}):')
                  if output['StandardOutputContent']:
                      print('STDOUT:')
                      print(output['StandardOutputContent'])
                      print('------------------------------------')
                  if output['StandardErrorContent']:
                      print('STDERR:')
                      print(output['StandardErrorContent'])
                      print('------------------------------------')
                  
                  if (not output['StandardOutputContent'] and not output['StandardErrorContent']):
                      print('NO OUTPUT RETURNED')
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Handler: index.handler
      Role: !GetAtt CronLambdaExecutionRole.Arn
      Runtime: python3.6
      MemorySize: 128
      Timeout: 30
            
  CronLambdaRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "rate(15 minutes)"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt CronLambda.Arn
          Id: "TargetFunctionV1"

  CronLambdaRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CronLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CronLambdaRule.Arn
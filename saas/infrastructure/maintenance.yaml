Description: >
  This template deploys a maintenance window schedule for automatic patching

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    
Resources:
  MaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties:
      Name: !Sub '${EnvironmentName}-Patch-Manager-Maintenance-Window'
      Description: 'SSM Maintenance Window to automate AWS Patch Manager tasks'
      Duration: 4
      Cutoff: 1
      Schedule: 'cron(00 00 ? * SAT *)'
      AllowUnassociatedTargets: false

  MaintenanceWindowTarget:
    Type: AWS::SSM::MaintenanceWindowTarget
    Properties:
      Name: !Sub '${EnvironmentName}-Target-For-Patch-Manager-Maintenance-Window'
      Description: 'Defines the EC2 Instance Targest for Maintenance Window: Patch-Manager-Maintenance-Window'
      ResourceType: INSTANCE
      WindowId: !Ref 'MaintenanceWindow'
      Targets:
        - Key: 'tag:Environment'
          Values:
            - !Ref 'EnvironmentName'

  MaintenanceWindowTask:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Name: !Sub '${EnvironmentName}-Task-For-Patch-Manager-Maintenance-Window'
      Description: 'Defines the Task for Maintenance Window: Patch-Manager-Maintenance-Window'
      ServiceRoleArn: !GetAtt 'MaintWindowIamRole.Arn'
      Priority: 1
      MaxErrors: 1
      MaxConcurrency: 1
      Targets:
        - Key: 'WindowTargetIds'
          Values:
            - !Ref 'MaintenanceWindowTarget'
      TaskType: RUN_COMMAND
      WindowId: !Ref 'MaintenanceWindow'
      TaskArn: AWS-RunPatchBaseline
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          Parameters:
            Operation:
              - 'Install'
          ServiceRoleArn: !GetAtt 'MaintWindowIamRole.Arn'

  MaintWindowIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ssm.amazonaws.com'
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
      Policies: []

  IamInlinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'taskRolePermissions'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Action: 'iam:PassRole'
            Resource: !GetAtt 'MaintWindowIamRole.Arn'
      Roles:
        - !Ref 'MaintWindowIamRole'
        
  # EventBridgeAutomationExecutionRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - events.amazonaws.com
  #           Action:
  #             - "sts:AssumeRole"
  #     Path: /
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
        
  # TriggerPatchingWhenInstanceStartsEventRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: "Install patches when instance starts"
  #     EventPattern:
  #       source:
  #         - "aws.ec2"
  #       detail-type:
  #         - "EC2 Instance State-change Notification"
  #       detail:
  #         state:
  #           - "running"
  #     State: "ENABLED"
  #     Targets:
  #       - Arn: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/AWS-PatchAsgInstance:$DEFAULT"
  #         Id: "NewInstancePatchAutomation"
  #         RoleArn: !GetAtt EventBridgeAutomationExecutionRole.Arn
  #         InputTransformer:
  #           InputTemplate: '{"InstanceId":[<instance>]}'
  #           InputPathsMap:
  #             instance: "$.detail.instance-id"

  # TriggerPatchLambdaExecutionRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - "sts:AssumeRole"
  #     Path: /
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - "logs:CreateLogGroup"
  #                 - "logs:CreateLogStream"
  #                 - "logs:PutLogEvents"
  #               Resource: "arn:aws:logs:*:*:*"
  #             - Effect: Allow
  #               Action:
  #                 - "ec2:DescribeInstances"
  #               Resource: "*"
  #     # ManagedPolicyArns:
  #     #   - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMAutomationRole
  #     #   - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole

  # TriggerPatchLambda:
  #   Type: 'AWS::Lambda::Function'
  #   DeletionPolicy: Delete
  #   Properties:
  #     Code:
  #       ZipFile: !Sub |
  #         import json
  #         import sys
  #         import time
  #         import random
  #         import boto3
          
  #         ssm_client = boto3.client('ssm')
  #         def handler(event, context):
  #             # TODO implement
              
  #             print(event)
              
  #             ec2 = boto3.resource('ec2')
              
  #             ec2instance = ec2.Instance(event['InstanceId'][0])
              
  #             for tags in ec2instance.tags:
  #                 if tags["Key"] == 'Environment' and tags["Value"] == '${EnvironmentName}':
  #                     result = ssm_client.start_automation_execution(
  #                         DocumentName='AWS-PatchAsgInstance',
  #                         Parameters={
  #                             'InstanceId': event['InstanceId'],
  #                             'AutomationAssumeRole': '${MaintWindowIamRole}'
  #                         }
  #                     )
              
  #             print(result)
              
  #             return {
  #                 'statusCode': 200,
  #                 'body': json.dumps('Hello from Lambda!')
  #             }
  #     Handler: index.handler
  #     Role: !GetAtt TriggerPatchLambdaExecutionRole.Arn
  #     Runtime: python3.6
  #     MemorySize: 128
  #     Timeout: 30
            
  # TriggerPatchLambdaRule:
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Description: "Install patches when instance starts"
  #     EventPattern:
  #       source:
  #         - "aws.ec2"
  #       detail-type:
  #         - "EC2 Instance State-change Notification"
  #       detail:
  #         state:
  #           - "running"
  #     State: "ENABLED"
  #     Targets: 
  #       - Arn: !GetAtt TriggerPatchLambda.Arn
  #         Id: "TargetFunctionV1"
  #         InputTransformer:
  #           InputTemplate: '{"InstanceId":[<instance>]}'
  #           InputPathsMap:
  #             instance: "$.detail.instance-id"

  # TriggerPatchLambdaRulePermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref TriggerPatchLambda
  #     Action: "lambda:InvokeFunction"
  #     Principal: "events.amazonaws.com"
  #     SourceArn: !GetAtt TriggerPatchLambdaRule.Arn
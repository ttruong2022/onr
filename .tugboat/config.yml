services:
  # What to call the service hosting the site.
  php:
    # Use PHP 8.x with Apache; this syntax pulls in the latest version of PHP 8
    image: tugboatqa/php:8.0-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Route requests to the preview URL to this service
    default: true

    urls:
      - /
    visualdiff:
      timeout: 30
      waitUntil: domcontentloaded

    # Wait until the mysql service is done building
    depends:
      - mysql
      - search

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Custom commands
        - echo "memory_limit = -1" >> /usr/local/etc/php/conf.d/my-php.ini
        - apt-get update -y
        - apt install libzip-dev
        - apt install zip
        - docker-php-ext-install zip

        # Install NodeJS and NPM
        - sudo curl -sL https://deb.nodesource.com/setup_17.x | bash -
        - apt-get install nodejs
        - npm install -g npm@latest
        - npm install gulp-cli gulp -g

        # Setup Pa11y
        - apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release xdg-utils wget
        - npm install -g pa11y-ci --unsafe-perm=true --allow-root
        - npm install -g pa11y-ci-reporter-html
        - npm install --save pretty

        # Setup AWS
        - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        - unzip awscliv2.zip
        - sudo ./aws/install --update
        - aws configure set aws_access_key_id ${aws_access_key_id}
        - aws configure set aws_secret_access_key ${aws_secret_access_key}
        - aws configure set region us-east-1
        - aws configure set output yaml

        # Install drush-launcher, if desired.
        - wget -O /usr/local/bin/drush https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
        - chmod +x /usr/local/bin/drush

        # Install dependencies for theme building and build themes.
        - npm install --prefix ${TUGBOAT_ROOT}/webroot/themes/custom/onr

        # Create the Drupal private and public files directories if they aren't
        # already present.
        - mkdir -p "${TUGBOAT_ROOT}/private-files" "${TUGBOAT_ROOT}/webroot/sites/default/files"
        - chown -R www-data:www-data ${TUGBOAT_ROOT}/private-files

        # Link the document root to the expected path. This example links /web
        # to the docroot.
        - ln -snf "${TUGBOAT_ROOT}/webroot" "${DOCROOT}"

        # Create the Drupal private and public files directories if they aren't
        # already present.
        # - mkdir -p "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/sites/default/files"

        # A common practice in many Drupal projects is to store the config and
        # private files outside of the Drupal root. If that's the case for your
        # project, you can either specify the absolute paths to those
        # directories in your settings.local.php, or you can symlink them in
        # here. Here is an example of the latter option:
        # - ln -snf "${TUGBOAT_ROOT}/config" "${DOCROOT}/../config"
        # - ln -snf "${TUGBOAT_ROOT}/files-private" "${DOCROOT}/../files-private"

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Custom commands
        - sudo composer self-update --2
        - composer install --ignore-platform-reqs --no-interaction --no-progress --optimize-autoloader

        # Install/update packages managed by composer, including drush.
        # - composer install --optimize-autoloader

        # Copy Drupal's public files directory from an external server. The
        # public SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use rsync over SSH.
        # - rsync -av --delete user@example.com:/path/to/files/ "${DOCROOT}/sites/default/files/"
        # We use stage_file_proxy
        - aws s3 sync s3://stage-s3-v9kxk801y99m-appbucket-17rfkiu194klk/Drupal/s3fs-public/ "${DOCROOT}/sites/default/files/"

        -  vendor/bin/robo fix:perms

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
        # - composer require --dev drupal/stage_file_proxy
        # - vendor/bin/drush pm:enable --yes stage_file_proxy
        # - vendor/bin/drush config:set --yes stage_file_proxy.settings origin "http://www.example.com"

        # Set file permissions such that Drupal will not complain.
        # - chgrp -R www-data "${DOCROOT}/sites/default/files"
        # - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        # - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        # Comment out defaults
        # - composer install --optimize-autoloader
        # - vendor/bin/drush cache:rebuild
        ##- vendor/bin/drush config:import -y
        # - vendor/bin/drush updatedb -y
        # - vendor/bin/drush cache:rebuild
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.tugboat.php" "${TUGBOAT_ROOT}/webroot/sites/default/"
        - composer install --ignore-platform-reqs --no-interaction --no-progress --optimize-autoloader

        # - touch "${TUGBOAT_ROOT}/webroot/version.txt" && echo ${GITTAG:-$GITCOMMIT} > "${TUGBOAT_ROOT}/webroot/version.txt"
        - vendor/bin/robo local:update
      #        - vendor/bin/drush user-create adminuser --mail="adminuser@tugboat.com" --password="#tUgb0at1234!"
      #        - vendor/bin/drush user-add-role "administrator" adminuser

      online:
        - bash .tugboat/pa11y-ci.sh

  # This 'mysql' key acts as the hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mariadb:10.7
    checkout: true

    # A set of commands to run while building this service
    commands:
      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Copy a database dump from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use scp.
        # - scp user@example.com:database.sql.gz /tmp/database.sql.gz
        - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        - unzip -o awscliv2.zip
        - sudo ./aws/install --update
        - aws configure set aws_access_key_id ${aws_access_key_id}
        - aws configure set aws_secret_access_key ${aws_secret_access_key}
        - aws configure set region us-east-1
        - aws configure set output yaml
        - aws s3 cp s3://stage-s3-v9kxk801y99m-appbucket-17rfkiu194klk/Drupal/db-backups/stage-backup-tugboat.sql.gz ./tugboat-db.sql
        - gzip ./tugboat-db.sql
        - zcat ./tugboat-db.sql.gz | mysql tugboat
        - rm ./tugboat-db.sql.gz

  search:
    image: tugboatqa/solr:8.11
    checkout: true
    commands:
      init:
        - su -p solr -c "solr create_core -c onr -d ${TUGBOAT_ROOT}/lando-src/solr-primary"